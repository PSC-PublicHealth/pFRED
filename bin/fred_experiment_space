#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Std;

# File: fred_experiment_space
# Author: John Grefenstette
# Created: Sep 28, 2012

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;
my $usage = "usage: $0 [-f config_file | -h | -s ]\n";

# get command line arguments
my %options = ();
getopts("hsf:", \%options);
if (exists $options{h}) {
  print "$usage";
  print "Try:\n$0 -s\nto get a sample configuration file.\n";
  exit;
}
if (exists $options{s}) {
  print <<EOF;
################################################# 
# Sample FRED Experiment Space config file
#
# Lines that starts with # are ignored.
# Otherwise, only change text after the first ":" on each line.
#
FRED Experiment Space Title: School Closure
Baseline Parameter File: params.school_closure

Sweep Parameters:
# the following illustrates a loop using min, max and increment:
Name: R0 Min: 1.0 Max: 3.5 Inc: 0.5
# the following uses a comma-separated list of values,
# which may be strings (with no spaces)
Name: Cases Values: [1, 5, 10]
Name: Weeks Values: [0, 1, 2, 4, 6, 8]

Output Variables:
# format: var = display string
# where "var" is a variable that occurs in the FRED output file
# and "display string" is how the variable should be displayed in FRED Navigator
AR = Serologic Attack Rate
CAR = Clinical Attack Rate
C = Incidents
CI = Clinical Incidents
RR = Reproductive Rate
EOF
  exit;
}

my $config_file = $options{f};
die $usage if (not $config_file) or (not -e $config_file);

open FH, $config_file or die "Can't open $config_file\n";

my $line;

# find the title line
get_next_line();
$line =~ /FRED Experiment Space Title:/ or die "Bad title line format\n";
my ($title) = $line =~ /Title:\s*(.*)/;
die "Bad title format\n" if not $title;
$title =~ s/\s/_/g;

# get the baseline parameter file
get_next_line();
print "LINE = $line\n";
$line =~ /Baseline Parameter File:/ or die "Bad baseline format\n";
my ($paramsfile) = $line =~ /File:\s*(.*)/;
die "Bad Baseline format\n" if not $paramsfile;
$paramsfile =~ s/\s//g;
die "Bad paramsfile format\n" if not $paramsfile;
die "No such baseline param file\n" if not -e $paramsfile;

# make FRED Navigator config file
my $fred_nav = "fred_navigator_config.$title";
open NAV, ">$fred_nav";
print NAV "## File: $fred_nav\n";
print NAV "## Created: ", scalar localtime, "\n";

# get the sweep parameters
my @names = ();
my @values = ();
my $name;

get_next_line();
$line =~ /Sweep Parameters:/ or die "Bad sweep format\n";

get_next_line();
while ($line !~ /Output Variables/) {
  my @pval = ();
  my ($min, $max, $inc, $value);
  if ($line =~ /Min:/) {
    ($name, $min, $max, $inc) = $line =~ /Name:\s+(\S+)\s+Min:\s+(\S+)\s+Max:\s+(\S+)\s+Inc:\s+(\S+)/;
    for (my $x = $min; $x <= $max; $x += $inc) { push @pval, $x; }
  }
  else {
    ($name, $value) = $line =~ /Name:\s+(\S+)\s+Values: \[(.*)\]/;
    $value =~ s/\s//g;
    @pval = split "," , $value;
  }
  push @names, $name;
  push @values, join " ", @pval;
  print NAV "$name \[@pval]\n";

  get_next_line();
}
print NAV "##\n";

# pass output variables to fred navigator config file
while ($line = <FH>) {
  print NAV $line;
}
print NAV "##\n";

# make script to run experiment space 
my $fred_exp_space = "run_fred_experiment_space.$title";
open EXEC, ">$fred_exp_space";
print EXEC "#!/bin/tcsh\n";
print EXEC "\n# File: $fred_exp_space\n";
print EXEC "# Created: ", scalar localtime, "\n";

my $set = "";
recurse($set,0);
close EXEC;
print NAV "##\n";
close NAV;
exit;

sub recurse {
  my ($s, $n) = @_;
  if ($n eq $#names) {
    my $pvals = $values[$n];
    my @pval = split " ", $pvals;
    for my $v (@pval) {
      my $my_value = "$names[$n]=$v";
      $my_value = "$s-$my_value" if $s;
      # print "$my_value\n";
      add_experiment($my_value);
    }
  }
  else {
    my $pvals = $values[$n];
    my @pval = split " ", $pvals;
    for my $v (@pval) {
      my $my_value = "$names[$n]=$v";
      $my_value = "$s-$my_value" if $s;
      recurse($my_value,$n+1);
    }
  }
}

sub add_experiment {
  my $key = shift;
  print EXEC "\n";
  print EXEC "cp $paramsfile params.$key\n";
  
  my @pars = split "-", $key;
  for my $par_val (@pars) {
    my ($param, $value) = split "=", $par_val;
    print EXEC "ch $param $value params.$key\n";
  }
  print EXEC "fred_delete -f -k $key\n";
  print EXEC "fred_job -k $key -p params.$key\n";
  print NAV "$key\n";
}


sub get_next_line {
  $line = "";
  while (not $line) {
    $line = <FH>; 
    chomp $line;
    $line = "" if $line =~ /^#/;
  }
}

#!/usr/bin/perl
use strict;
use warnings;
use Env;
#use Cwd;
use Fcntl qw(:flock);
use Getopt::Std;
$| = 1;  # AUTO_FLUSH

# File: run_fred
# Author: John Grefenstette
# Created: Jan 12, 2010
# Updated: Apr 7, 2010

# get current working directory
# my $cwd = getcwd();

my $FRED = $ENV{FRED_HOME};
die "run_fred: Please set environmental variable FRED_HOME to location of FRED source directory\n" if not $FRED;

# get command line arguments
my %options = ();
getopts("p:k:", \%options);
my $paramsfile;
$paramsfile = $options{p} if exists $options{p};
my $key;
$key = $options{k} if exists $options{k};
$paramsfile = "params" if not $paramsfile;

# make a temp copy of the params file
# my ($paramsfile, $key) = @ARGV;
# $paramsfile = "params" if not $paramsfile;
die "run_fred: Bad params file name\n" if $paramsfile =~ /;/;
my $params = "/tmp/params.$$";
die "run_fred: Can't find params file $paramsfile\n" if not -e $paramsfile;
system "cp $paramsfile $params";

# NOTE: the rest of the script runs in the FRED_HOME directory
chdir $FRED or die "Can't change to FRED directory $FRED\n";

# set locking semaphore
my $SEMAPHORE = ".results.lck";
open(SEM, ">$SEMAPHORE") || die "run_fred failed to obtain semaphore: ($!)\n";
flock(SEM, LOCK_EX);

# compile FRED if necessary
system "make -s";

# create RESULTS directory if needed
my $fred_results = "$FRED/RESULTS";
if (not -d $fred_results) {
  mkdir "$fred_results" or (close SEM and die "Can't create RESULTS directory\n");
}

# create RESULTS/RUN directory if needed
if (not -d "$fred_results/RUN") {
  mkdir "$fred_results/RUN" or (close SEM and die "Can't create $fred_results/RUN directory\n");
}

# create $fred_results/ID file if needed
if (not -e "$fred_results/ID") {
  open FH, ">$fred_results/ID" or (close SEM and die "Can't create file $fred_results/ID\n");
  print FH "1\n";
  close FH;
}

# create $fred_results/KEY file if needed
if (not -e "$fred_results/KEY") {
  open FH, ">$fred_results/KEY" or (close SEM and die "Can't create file $fred_results/KEY\n");
  close FH;
}

# determine if key is unique. if not, terminate.
open FH, "$fred_results/KEY";
while (<FH>) {
  chomp;
  my ($k) = split;
  if ($k eq $key) {
    close SEM and close FH and die "run_fred: key $key already used.\n";
  }
}
close FH;

# see if we have already used there params before.
# if so, just return the id of the previous request
open FH, "$fred_results/KEY";
while (<FH>) {
  chomp;
  my ($k, $id) = split;
  if (same_params($params, "$fred_results/RUN/$id/META/PARAMS")) {
    close FH;

    # add key-id pair
    `echo $key $id >> $fred_results/KEY`;

    # release semaphore
    close SEM;

    # return to original directory
    # chdir $cwd;
    print "$key $id\n";
    exit;
  }
}
close FH;

# get id for this experiment and update counter
open FH, "$fred_results/ID";
my $id = <FH>;
chomp $id;
# print "id = |$id|\n";
close FH;
my $new_id = $id + 1;
open FH, ">$fred_results/ID";
print FH "$new_id\n";
close FH;

# use experiment id unless given command line key
$key = $id if not defined $key;

# add key-id pair
`echo $key $id >> $fred_results/KEY`;

# release semaphore
close SEM;

my $dir = "$fred_results/RUN/$id";
die "run_fred: ID $id already used\n" if -d $dir;

# make directory for this experiment
mkdir $dir or die "Can't make directory $dir\n";

# make directories for output
my $data = "$dir/DATA";
mkdir $data or die "Can't make directory $data\n";

my $out = "$data/OUT";
mkdir $out or die "Can't make directory $out\n";

my $reports = "$data/REPORTS";
mkdir $reports or die "Can't make directory $reports\n";

# record meta data about this run
my $meta = "$dir/META";
mkdir $meta or die "Can't make directory $meta\n";

# update run status
`echo SETUP > $meta/STATUS`;

# record the KEY
`echo $key > $meta/KEY`;

# return run_key association
print "$key $id\n";

my $datefile = "$meta/DATE";
`date > $datefile`; 

my $userfile = "$meta/USER";
my $user = $ENV{USER};
`echo $user > $userfile`;

`hostname > $meta/WHERE`;

my $cmdfile = "$meta/COMMAND";
`echo ./FRED $paramsfile > $cmdfile`; 

my $logfile = "$meta/LOG";

# copy source code
my $version = "$meta/VERSION";
mkdir $version or die "Can't make directory $version\n";
`cp -p Makefile profiles.txt *.cc *.h params* test_* LICENSE $version`;
`cp $params $version/$paramsfile`;

# copy the params file
`cp $params $meta/PARAMS`;

# redirect output parameters
`$FRED/bin/ch outdir $out $params >> $logfile`;

# update run status
`echo RUNNING > $meta/STATUS`;

# finally, run FRED
# system "./FRED $params | tee -a $logfile";
system "./FRED $params > $logfile";
# unlink $params;

# process output files
system "$FRED/bin/stats $out/out* > $reports/stats.out";

# my @fields = qw/S E I R I_s M C AR CI RR V/;
my @fields = ();
open IN, "$reports/stats.out";
my $line = <IN>;
close IN;
my @a = split " ", $line;
for my $i (6..$#a) {
  push @fields, $a[$i] if $a[$i]=~/[a-z]/i;
}

for my $x (@fields) {
  open OUT, ">$reports/$x.dat";
  open IN, "$reports/stats.out";
  while (my $line = <IN>) {
    my @a = split " ", $line;
    for my $i (0..$#a) {
      if ($a[$i] eq $x) {
	print OUT "$a[1] $a[$i+1] $a[$i+2]\n";
	last;
      }
    }
  }
  close IN;
  close OUT;
}

# update run status
`echo FINISHED > $meta/STATUS`;

# return to original directory
# chdir $cwd;

exit;

sub same_params {
  my ($p1, $p2) = @_;
  my $vac_file_line;
  my ($name, $vac_file1, $vac_file2);
#  return 0;
  my $diff = `diff -b -B -q $p1 $p2`;
  return 1 if $diff eq "";

  #try the diff but ignore lines with vaccination_capacity_file
  $diff = `diff -b -B -q -I "vaccination_capacity_file" $p1 $p2`;
  return 0 if !($diff eq "");

  $vac_file_line = `grep "vaccination_capacity_file" $p1`;
  ($name, $vac_file1) = split(/\s+=\s+/, $vac_file_line);
  chomp($vac_file1);

  $vac_file_line = `grep "vaccination_capacity_file" $p2`;
  ($name, $vac_file2) = split(/\s+=\s+/, $vac_file_line);
  chomp($vac_file2);

  #diff the vaccine_capacity_files themselves
  $diff = `diff -b -B -q $vac_file1 $vac_file2`;
  return 1 if $diff eq "";

  #not the same return 0 (false)
  return 0;
}

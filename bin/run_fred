#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Cwd;
use Fcntl qw(:flock);
use Getopt::Std;
use POSIX qw/ceil/;
$| = 1;  # AUTO_FLUSH

# File: run_fred
# Author: John Grefenstette
# Created: Jan 12, 2010
# Updated: Sep 22, 2010

# get current working directory
my $cwd = getcwd();

my $FRED = $ENV{FRED_HOME};
die "run_fred: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

# get command line arguments
my %options = ();
getopts("scp:k:", \%options);
my $paramsfile;
$paramsfile = $options{p} if exists $options{p};
my $key;
$key = $options{k} if exists $options{k};
$paramsfile = "params" if not $paramsfile;
my $cache = exists $options{c};
my $use_serial = exists $options{s};

# get the base of the params file name
my $params_base = $paramsfile;
$params_base =~ s/.*\/// if $params_base =~ /\//;
my @a = ();

# declare these in package
my $cpus;
my $using_pbs;

# if not using serial mode, determine how many cpus to use for parallel runs
if (! $use_serial) {
  # are we running in the context of a PBS batch job?
  my $using_pbs = (exists $ENV{PBS_JOBID}) ? 1 : 0;

  # intialize cpu count
  $cpus = 0;
  if ($using_pbs) {
    # if using PBS, look up how many cores have been requested
    if (exists $ENV{PBS_NODEFILE} && -f $ENV{PBS_NODEFILE}) {
      open FH, $ENV{PBS_NODEFILE};
      $cpus++ while (<FH>);
      close FH;
    }
  } elsif (-f "/proc/cpuinfo") {
    # not using PBS so see if we can get a core count from /proc/cpuinfo
    # TODO: watch out for Intel Hyper-threading cpus
    open FH, "/proc/cpuinfo";
    while (<FH>) {
      $cpus++ if /^processor\s*:/;
    }
    close FH;
  } else {
    # cannot determine how many cpus are available so force serial mode
    $use_serial = 1;
  }
}

# get the file parameters from the params files
my $popdir = get_param_value("popdir",$paramsfile);
if ($popdir eq ".") { $popdir = $cwd; }
else { $popdir = "$cwd/$popdir"; }

my $runs = get_param_value("runs",$paramsfile);
my $profiles = get_param_value("profiles",$paramsfile);
my $primary_cases = get_param_value("primary_cases_file[0]",$paramsfile);
my $vaccine_file =  get_param_value("vaccine_file",$paramsfile);
my $vaccination_capacity_file =  get_param_value("vaccination_capacity_file",$paramsfile);

my $profiles_base = $profiles;
$profiles_base =~ s/.*\/// if $profiles_base =~ /\//;
my $primary_cases_base = $primary_cases;
$primary_cases_base =~ s/.*\/// if $primary_cases_base =~ /\//;
my $vaccine_file_base = $vaccine_file;
$vaccine_file_base =~ s/.*\/// if $vaccine_file_base =~ /\//;
my $vaccination_capacity_file_base = $vaccination_capacity_file;
$vaccination_capacity_file_base =~ s/.*\/// if $vaccination_capacity_file_base =~ /\//;

# NOTE: the next part of the script runs in the FRED_HOME directory
chdir $FRED or die "Can't change to FRED directory $FRED\n";

# compile FRED if necessary
# system "cd src; make -s";

# set locking semaphore
my $SEMAPHORE = ".results.lck";
open(SEM, ">$SEMAPHORE") || die "run_fred failed to obtain semaphore: ($!)\n";
flock(SEM, LOCK_EX);

# create RESULTS directory if needed
my $fred_results = "$FRED/RESULTS";
if (not -d $fred_results) {
 mkdir "$fred_results" or (close SEM and die "Can't create RESULTS directory\n");
}

# create RESULTS/RUN directory if needed
if (not -d "$fred_results/RUN") {
 mkdir "$fred_results/RUN" or (close SEM and die "Can't create $fred_results/RUN directory\n");
}

# create $fred_results/ID file if needed
if (not -e "$fred_results/ID") {
 open FH, ">$fred_results/ID" or (close SEM and die "Can't create file $fred_results/ID\n");
 print FH "1\n";
 close FH;
}

# create $fred_results/KEY file if needed
if (not -e "$fred_results/KEY") {
 open FH, ">$fred_results/KEY" or (close SEM and die "Can't create file $fred_results/KEY\n");
 close FH;
}

# determine if key is unique. if not, terminate.
if ($key) {
  open FH, "$fred_results/KEY";
  while (<FH>) {
    chomp;
    my ($k) = split;
    if ($k eq $key) {
      close SEM and close FH and die "run_fred: key $key already used.\n";
    }
  }
  close FH;
}

if ($key and $cache) {
  # see if we have already used these params before.
  # if so, just return the id of the previous request
  open FH, "$fred_results/KEY";
  while (<FH>) {
    chomp;
    my ($k, $id) = split;
    if (same_params("$cwd/$paramsfile", "$fred_results/RUN/$id/META/PARAMS")) {
      close FH;
      
      # add key-id pair
      `echo $key $id >> $fred_results/KEY`;

      # release semaphore
      close SEM;

      # return to original directory
      chdir $cwd;
      print "$key $id\n";
      exit;
    }
  }
  close FH;
}

# get id for this experiment and update counter
open FH, "$fred_results/ID";
my $id = <FH>;
chomp $id;
# print "id = |$id|\n";
close FH;
my $new_id = $id + 1;
open FH, ">$fred_results/ID";
print FH "$new_id\n";
close FH;

# use experiment id unless given command line key
$key = $id if not defined $key;

# add key-id pair
`echo $key $id >> $fred_results/KEY`;

# release semaphore
close SEM;

# make main directory for this experiment
my $dir = "$fred_results/RUN/$id";
die "run_fred: ID $id already used\n" if -d $dir;
mkdir $dir or die "Can't make directory $dir\n";

# return run_key association
print "$key $id\n";

# make working directory
my $work = "$dir/WORK";
mkdir $work or die "Can't make directory $work\n";

# make directories for output
my $data = "$dir/DATA";
mkdir $data or die "Can't make directory $data\n";

my $out = "$data/OUT";
mkdir $out or die "Can't make directory $out\n";

my $reports = "$data/REPORTS";
mkdir $reports or die "Can't make directory $reports\n";

# record meta data about this run
my $meta = "$dir/META";
mkdir $meta or die "Can't make directory $meta\n";

# update run status
`echo SETUP > $meta/STATUS`;

# record the KEY
`echo $key > $meta/KEY`;

# record the time and date
`date > $meta/DATE`; 

# record the user
`echo $ENV{USER} > $meta/USER`;

# record the host
`hostname > $meta/WHERE`;

# record the original FRED command
`echo ./FRED $paramsfile > $meta/COMMAND`; 

# create the LOG file
my $logfile = "$meta/LOG";

# copy source code
my $version = "$meta/VERSION";
mkdir $version or die "Can't make directory $version\n";
`cp -p $FRED/src/FRED.tar.gz $FRED/src/FRED.md5 $version`;
`cp -p $FRED/region/*_pop.md5 $FRED/region/*_loc.md5 $version`;

# return to original directory
chdir $cwd;

# copy the input files to working directory
`cp params.def $work/params.def`;
my $params = "$work/$params_base";
`cp $paramsfile $params`;
`cp $profiles "$work/$profiles_base"`;
`cp $primary_cases "$work/$primary_cases_base"`;
`cp $vaccine_file "$work/$vaccine_file_base"` if $vaccine_file ne "none";
`cp $vaccination_capacity_file "$work/$vaccination_capacity_file_base"` if $vaccination_capacity_file ne "none";

# copy the params file to RESULTS for reference
`cp $paramsfile $meta/PARAMS`;

# redirect the path to the population file
`$FRED/bin/ch popdir $popdir $params >> $logfile`;

# redirect output parameters
`$FRED/bin/ch outdir $out $params >> $logfile`;
`$FRED/bin/ch profiles $profiles_base $params >> $logfile`;
`$FRED/bin/ch 'primary_cases_file[0]' $primary_cases_base $params >> $logfile`;
`$FRED/bin/ch vaccine_file $vaccine_file_base $params >> $logfile`;
`$FRED/bin/ch vaccination_capacity_file $vaccination_capacity_file_base $params >> $logfile`;

# update run status
`echo RUNNING > $meta/STATUS`;

# finally, run FRED
if ($use_serial) {
  # run FRED in background process
  # system "$FRED/bin/run_fred_helper $FRED/bin/FRED $params $logfile $FRED/bin/fred_report $out $reports $meta/STATUS &";
  # NOTE: the next part of the script runs in the WORK directory
  chdir $work or die "Can't change to FRED directory $work\n";
  system "$FRED/bin/FRED $params > $logfile";
} else {
  # parallel run

  # number of single cpu fred runs
  my $runs_remaining = $runs;

  # break down runs into sets of "$cpus" each
  my $num_run_sets = ceil($runs / $cpus);

  # create the LOG file for parallel run information
  my $logfile_parallel = "$meta/LOGP";

  # initialize parallel log to record activity
  open LP, ">$logfile_parallel";
  print LP "runs=$runs\n";
  print LP "cpus=$cpus\n";
  print LP "number of sets=$num_run_sets\n";
  close LP;

  # iterate over the number of sets of runs
  for (my $run_set = 0; $run_set < $num_run_sets; $run_set++) {
    # distribute fred runs accross cpus for this set
    my $run_instance = 0;
    while ($run_instance < $cpus && $runs_remaining > 0) {
      # set fred instance (1 through $runs)
      my $fred_instance = $runs - $runs_remaining + 1;

      # log parallel activity
      open LP, ">>$logfile_parallel";
      print LP "Starting fred instance $fred_instance in set $run_set, instance $run_instance\n";
      close LP;

      # create instance-specific log file
      my $logfilep = "$meta/LOG.$fred_instance";

      # run FRED in background process
      # system "$FRED/bin/run_fred_helper $FRED/bin/FRED $params $logfile $FRED/bin/fred_report $out $reports $meta/STATUS &";

      # create child process
      if (fork() == 0) {
        # child
        if ($using_pbs) {
          # run on remote node
          exec "pbsdsh -n $run_instance /bin/sh -c \"cd $work && $FRED/bin/FRED $params $fred_instance > $logfilep\"\n";
        } else {
          # run on localhost
          exec "cd $work && $FRED/bin/FRED $params $fred_instance > $logfilep \n" ;
        }
      }

      $run_instance++;
      $runs_remaining--;
    } # while run_instance

    # wait for all child processes to finish from current set
    while (wait() != -1) {}
  } #for run_set
} # if serial

# make reports
`$FRED/bin/fred_report $out $reports`;

# update run status
`echo FINISHED > $meta/STATUS`;

# return to original directory
chdir $cwd;

exit;

sub same_params {
  my ($p1, $p2) = @_;
  my $vac_file_line;
  my ($name, $vac_file1, $vac_file2);
  #  return 0;
  my $diff = `diff -b -B -q $p1 $p2`;
  return 1 if $diff eq "";

  #try the diff but ignore lines with vaccination_capacity_file
  $diff = `diff -b -B -q -I "vaccination_capacity_file" $p1 $p2`;
  return 0 if !($diff eq "");

  $vac_file_line = `grep "vaccination_capacity_file" $p1`;
  ($name, $vac_file1) = split(/\s+=\s+/, $vac_file_line);
  chomp($vac_file1);

  $vac_file_line = `grep "vaccination_capacity_file" $p2`;
  ($name, $vac_file2) = split(/\s+=\s+/, $vac_file_line);
  chomp($vac_file2);

  #diff the vaccine_capacity_files themselves
  $diff = `diff -b -B -q $vac_file1 $vac_file2`;
  return 1 if $diff eq "";

  #not the same return 0 (false)
  return 0;
}


sub get_param_value {
  my ($param, $paramsfile) = @_;
  $param =~ s/\[/\\[/g;
  $param =~ s/\-/\\-/g;
  my $dval = `grep '$param =' params.def`;
  chomp $dval;
  my @a = split " ", $dval;
  $dval = pop @a;
  return "" if not $dval;
  # print "dval = |$dval|\n";
  my $pval = `grep '$param =' $paramsfile`;
  if ($pval) {
    @a = split " ", $pval;
    $pval = pop @a;
  }
  # print "pval = |$pval|\n";
  return $pval if $pval;
  return $dval if $dval;
  return "";
}



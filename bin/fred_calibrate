#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
$| = 1;

#####################################
#
# File: fred_calibrate
# Author: John Grefenstette
# 26 Aug 2011
# Last Revised: Oct 3, 2012
#
# Based on targets proposed by Phil Cooley:
#
my $Htarget = 30;
my $Ntarget = 33;
my $Starget = 24.66;
my $Wtarget = 12.34;
my $CARtarget = 33;		# clinical attack rate
my $oldparams = "";
my $runs = 1;
my $cores = 1;

# stopping criteria
my $threshold = 0.1;

my $usage = "usage: $0 [ -p oldparams | -r runs | -m cores | -H Htarget | -N Ntarget | -S Starget | -W Wtarget | -A CARtarget ]\n";
my $help = "";
my $opt_result = GetOptions(
			    "h" => \$help,
			    "p=s" => \$oldparams,
			    "r=i" => \$runs,
			    "m=i" => \$cores,
			    "H=s" => \$Htarget,
			    "N=s" => \$Ntarget,
			    "S=s" => \$Starget,
			    "W=s" => \$Wtarget,
			    "A=s" => \$CARtarget
);
die $usage if $help;
die $usage if not $oldparams;
open FH, $oldparams or die "Can't open params file $oldparams\n$usage";

# read original params
my @orig = <FH>;
close FH;

my $paramsfile = "$oldparams-cal";
my $paramsfinal = "$oldparams-calibrated";

# get settings for calibration parameters from input file
my $x = `grep household_contact $oldparams`;
my @tmp = split " ", $x;
my $h = pop @tmp;
$x = `grep neighborhood_contact $oldparams`;
@tmp = split " ", $x;
my $n = pop @tmp;
$x = `grep school_contact $oldparams`;
@tmp = split " ", $x;
my $s = pop @tmp;
$x = `grep workplace_contact $oldparams`;
@tmp = split " ", $x;
my $w = pop @tmp;

my $error = $threshold + 1.0;
my $step = 0;
while ($error > $threshold) {
  $step++;
  my $time = localtime();
  my $paramsfile = "$oldparams-cal-$step";
  print "Creating paramsfile $paramsfile\n";
  open CAL, ">$paramsfile" or die "Can't create paramsfile $paramsfile\n";
  print CAL @orig;
  print CAL "###  CALIBRATION PHASE I STEP $step at $time\n";
  print CAL "###  runs = $runs  cores = $cores\n";
  printf CAL "household_contacts[0] = %0.6f\n", $h;
  printf CAL "neighborhood_contacts[0] = %0.6f\n", $n;
  printf CAL "school_contacts[0] = %0.6f\n", $s;
  printf CAL "workplace_contacts[0] = %0.6f\n", $w;
  print CAL "classroom_contacts[0] = -1\n";
  print CAL "office_contacts[0] = -1\n";
  close CAL;

  system "cp $paramsfile $paramsfinal";

  print "###  CALIBRATION PHASE I STEP $step at $time\n";
  print "###  runs = $runs  cores = $cores\n";
  printf "household_contacts[0] = %0.6f\n", $h;
  printf "neighborhood_contacts[0] = %0.6f\n", $n;
  printf "school_contacts[0] = %0.6f\n", $s;
  printf "workplace_contacts[0] = %0.6f\n", $w;
  print "classroom_contacts[0] = -1\n";
  print "office_contacts[0] = -1\n";

  system "fred_delete -f -k $paramsfile >& /dev/null";
  system "fred_job -k $paramsfile -p $paramsfile -n $runs -m $cores";
  my $dir = `fred_cd -k $paramsfile | awk \'{print \$2}\' `;
  chomp $dir;

  system "get_distr $dir";
  system "cat get_distr.dat";
  $x = `cat get_distr.dat`;
  my ($H, $N, $S, $W) = split " ", $x;

  my $CAR = `fred_CAR -k $paramsfile | awk \'{print \$1}\'`;
  chomp $CAR;

  my $eh = $H - $Htarget;
  my $en = $N - $Ntarget;
  my $es = $S - $Starget;
  my $ew = $W - $Wtarget;
  my $ea = $CAR - $CARtarget;;

  printf "CAR = %0.6f\n", $CAR;
  printf "errors: EH = %0.6f EN = %0.6f  ES = %0.6f  EW = %0.6f  EA = %0.6f\n",
    $eh, $en, $es, $ew, $ea;

  $error = abs($eh) + abs($en) + abs($es) + abs($ew) + abs($ea);
  printf "total error = %0.6f\n\n\n", $error;
  
  if (abs($ea) < 1.0) {
    $h *= $Htarget / $H if $H > 0;
    $n *= $Ntarget / $N if $N > 0;
    $s *= $Starget / $S if $S > 0;
    $w *= $Wtarget / $W if $W > 0;
    $error = abs($eh) + abs($en) + abs($es) + abs($ew);
  }
  else {
    # adjust to achieve desired CAR 
    my $ar_ratio = $CARtarget / $CAR;
    $h *= $ar_ratio * $Htarget / $H if $H > 0;
    $n *= $ar_ratio * $Ntarget / $N if $N > 0;
    $s *= $ar_ratio * $Starget / $S if $S > 0;
    $w *= $ar_ratio * $Wtarget / $W if $W > 0;
  }
  $h = 1.0 if $h > 1.0;
  system "fred_delete -f -k $paramsfile >& /dev/null";
  unlink $paramsfile;
}

$error = 100;
$threshold = 0.01;

while ($error > $threshold) {
  $step++;
  my $time = localtime();
  my $paramsfile = "$oldparams-cal-$step";

  open CAL, ">$paramsfile";
  print CAL @orig;
  print CAL "###  CALIBRATION PHASE II STEP $step at $time\n";
  print CAL "###  runs = $runs  cores = $cores\n";
  printf CAL "household_contacts[0] = %0.6f\n", $h;
  printf CAL "neighborhood_contacts[0] = %0.6f\n", $n;
  printf CAL "school_contacts[0] = %0.6f\n", $s;
  printf CAL "workplace_contacts[0] = %0.6f\n", $w;
  print CAL "classroom_contacts[0] = -1\n";
  print CAL "office_contacts[0] = -1\n";
  close CAL;

  system "cp $paramsfile $paramsfinal";

  print "###  CALIBRATION PHASE II STEP $step at $time\n";
  print "###  runs = $runs  cores = $cores\n";
  printf "household_contacts[0] = %0.6f\n", $h;
  printf "neighborhood_contacts[0] = %0.6f\n", $n;
  printf "school_contacts[0] = %0.6f\n", $s;
  printf "workplace_contacts[0] = %0.6f\n", $w;
  print "classroom_contacts[0] = -1\n";
  print "office_contacts[0] = -1\n";

  system "fred_delete -f -k $paramsfile >& /dev/null";
  system "fred_job -k $paramsfile -p $paramsfile -n $runs -m $cores";

  my $dir = `fred_cd -k $paramsfile | awk \'{print \$2}\' `;
  chomp $dir;
  system "get_distr $dir";
  system "cat get_distr.dat";
  $x = `cat get_distr.dat`;
  my ($H, $N, $S, $W) = split " ", $x;

  my $CAR = `fred_CAR -k $paramsfile | awk \'{print \$1}\'`;
  chomp $CAR;
  my $ea = $CAR - $CARtarget;;
  printf "CAR = %0.4f\n", $CAR;
  printf "errors: EA = %0.4f\n", $ea;
  $error = abs($ea);
  printf "total error = %0.4f\n\n\n", $error;
  
  # adjust to achieve desired CAR 
  my $ar_ratio = $CARtarget / $CAR;
  $h = ($h + $h * $ar_ratio ) / 2.0;
  $n = ($n + $n * $ar_ratio ) / 2.0;
  $s = ($s + $s * $ar_ratio ) / 2.0;
  $w = ($w + $w * $ar_ratio ) / 2.0;
  $h = 1.0 if $h > 1.0;

  system "fred_delete -f -k $paramsfile >& /dev/null";
  unlink $paramsfile;
}




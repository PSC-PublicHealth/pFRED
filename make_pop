#!/usr/bin/perl
use strict;
use warnings;
$| = 1;

print "usage: make_pop area\n" if (scalar @ARGV < 1);
die "area = dc | alleg  test\n" if (scalar @ARGV < 1);
my ($area) = @ARGV;
my $infile = $area . ".txt";
my $teachfile = $area . "_teachers.txt";
my $hospfile =  $area . "_hospitals.txt";
my $locfile =   $area . "_loc.txt";
my $popfile =   $area . "_pop.txt";
my $neighfile = $area . "_neigh.txt";

srand(12345);

open FH, $infile or die "infile $infile not found\n";
open SCHOOL, $teachfile or die "Teacher file $teachfile not found\n";
open HOS, $hospfile or die "Hospital file $hospfile not found\n";

open TMP, ">pop.tmp";

my %loc = ();
my %neigh = ();
my %type = ();
my %firm = ();
my %office = ();
my %numclass = ();
my %room = ();
my %school_map = ();
my %blocks = ();
my %classrooms = ();
my $employed = 0;

# map school workplaces to their school field id
# print "school map\n";
while (<SCHOOL>) {
  chomp;
  my ($school_w, $school_s) = split;
  $school_map{"W-$school_w"} = "S-$school_s";
}
close SCHOOL;

# create population array in tmp file (input has one line per person)
my $id = 0;
while (my $line = <FH>) {
  chomp $line;
  my ($block, $house, $occ, $age, $sex, $married, $prof, $w, $lat, $lon, $school, $x, $work);

  if ($area eq "dc") {
    ($block, $house, $occ, $age, $sex, $married, $prof, $w, $lat, $lon, $school, $x, $work) = split " ", $line;
  }

  if ($area eq "alleg" or $area eq "test") {
    $w = $x = $prof = $married = -1;
    ($block, $house, $occ, $age, $sex, $lat, $lon, $school, $work) = split " ", $line;
  }
  $employed++ if $work ne "0";

  last if ($area eq "test" and (not exists $blocks{$block}) and scalar (keys %blocks) > 20);
  $blocks{$block} = 1;

  $sex = ($sex == 1)? "M": "F";
  my $houseid = "H-$block-$house";
  # my $hood = substr($block,0,8);
  my $hood = "N-$block";
  
  # add household location
  $loc{"$houseid"} = "$lat $lon 0";
  $type{"$houseid"} = "H";

  # compute center of neighborhood
  my ($tlat, $tlon, $n) = (0,0,0);
  if (exists $neigh{$hood}) {
    ($tlat, $tlon, $n) = split " ", $neigh{$hood};
    $tlat += $lat; $tlon += $lon; $n += 1;
  }
  else {
    $tlat = $lat; $tlon = $lon; $n = 1;
  }
  $neigh{$hood} = "$tlat $tlon $n";

  # assign students to classroom segregated by age
  my $class = 0;
  if ($school ne "0") {
    $school = "S-$school";
    $class = sprintf "%s-%02d", $school, $age;
    if (exists $numclass{"$class"}) {
      $numclass{"$class"}++;
      if ($numclass{"$class"} > 40) {
	$numclass{"$class"} = 1;
	$room{"$class"}++;
      }
    }
    else {
      $numclass{"$class"} = 1;
      $room{"$class"} = 1;
    }
    $class = "$class$room{$class}";
    if (exists $classrooms{$school} ) {
	$classrooms{$school} .= " $class" if $classrooms{$school} !~ /$class/;
    }
    else {
	$classrooms{$school} = $class;
    }

    # add school location
    $loc{"$school"} = "0 0 0";
    $type{"$school"} = "S";
    $loc{"$class"} = "0 0 $school";
    $type{"$class"} = "C";
  }

  # add work location
  if ($work ne "0") {
    $work = "W-$work";
    if (exists $school_map{"$work"} and $school eq 0) {
      print "teacher: $line\n";
      $school = $school_map{"$work"};
      $work = 0;
      $occ = "TTT-$occ";
    }
  }

  # count number of workers in each firm (except schools)
  my $off = 0;
  if ($work ne "0") {
    $type{"$work"} = "W";
    $loc{$work} = "0 0 0";
    $firm{$work} = 0 if not exists $firm{$work};
    $firm{$work}++;
    $office{$work} = 1 if not exists $office{$work};
    $office{$work}++ if $firm{$work} > 50;
    $firm{$work} = 1 if $firm{$work} > 50;
    $off = "$work-$office{$work}";
    $loc{"$off"} = "0 0 $work";
    $type{$off} = "O";
  }

  ## dc: print TMP "$id $age $sex $married $occ $prof $houseid $hood $school $class $work $off\n";
  print TMP "$id $age $sex $married $occ $houseid $hood $school $class $work $off\n";
  $id++;
  # last if $id == 10000;
}				# end of read-loop on <area>.txt
my $popsize = $id;
close FH;
close TMP;

# read in pop and assign each teacher to a classroom
open TMP, "pop.tmp";
open TMP2, ">pop.tmp2";
while (my $line = <TMP>) {
  chomp $line;
  my ($id,$age,$sex,$married,$occ,$houseid, $hood,$school,$class,$work,$off) = split " ", $line;
  if ($occ=~/TTT/) {
    # assign teacher  to a classroom
    # print "$line\n";
    die "No classrooms in $school\n" if not exists $classrooms{$school};
    my @cl = split " ", $classrooms{$school};
    $class = $cl[rand @cl];
    print "teacher $id assigned: $id $age $sex $married $occ $houseid $hood $school $class $work $off\n\n";
  }
  print TMP2 "$id $age $sex $married $occ $houseid $hood $school $class $work $off\n";
}
close TMP;
close TMP2;

# add neighborhood locations
print "add neighbor locs\n";
for my $hood (sort keys %neigh) {
  my ($tlat, $tlon, $n) = split " ", $neigh{$hood};
  # center of mass for the neighborhood
  $tlat /= $n if $n;
  $tlon /= $n if $n;
  $loc{"$hood"} = "$tlat $tlon 0";
  $type{"$hood"} = "N";
}

# re-label hospitals
print "re-label hospitals\n";
while (<HOS>) {
  last;
  chomp;
  my ($hosp) = split;
  $hosp = "W-$hosp";
  die "hosp $hosp not in workplace list\n" if not exists $loc{"$hosp"};
  $type{$hosp} = "M";
}
close HOS;

# map loc id to array index
print "map loc id to array index\n";
my @place = ();
my %pmap = ();
$pmap{0}= -1;
$id = 0;
push @place, "0 Community 0 0 0";
$pmap{Community} = $id;
$type{Community} = "X";
$id++;
for my $key (sort keys %loc) {
  push @place, "$id $key $loc{$key}";
  # print "$id $key $loc{$key}\n";
  $pmap{$key} = $id;
  $id++;
}

open NE, ">$neighfile";
open LOC, ">$locfile";
print LOC "Locations = ", scalar @place, "\n";
for my $i (0..$#place) {
  my ($id, $label, $lat, $lon, $container) = split " ", $place[$i];
  die "no id: |$place[$i]|\n" if not defined $id;
  die "no label: |$place[$i]|\n" if not defined $label;
  die "no lat: |$place[$i]|\n" if not defined $lat;
  die "no lon: |$place[$i]|\n" if not defined $lon;
  die "no container: |$place[$i]|\n" if not defined $container;
  die "no pmap{container}: |$place[$i]|\n" if not exists $pmap{$container};
  $container = $pmap{$container};
  die "No type for place $label\n" if not exists $type{$label};
  print LOC "$id $label $type{$label} $lat $lon $container\n";
  if ($type{$label} eq "N") {
    my ($tlat, $tlon, $n) = split " ", $neigh{$label};
    print NE "$id $label $type{$label} $lat $lon $n\n" if $type{$label} eq "N";
  }

}
close LOC;
close NE;

print "print popfile $popfile\n";

open POP, ">$popfile";
print POP "Population = $popsize\n";
open TMP, "pop.tmp2";
while (my $line = <TMP>) {
  chomp $line;
  my $profile = 0;
  my ($id,$age,$sex,$married,$occ,$houseid, $hood,$school,$class,$work,$off) = split " ", $line;
  die "house $houseid not found in pmap\n" if not exists $pmap{$houseid};
  $houseid = $pmap{$houseid};
  die "hood $hood not found in pmap\n" if not exists $pmap{$hood};
  $hood = $pmap{$hood};
  die "school $school not found in pmap\n$line\n\n" if not exists $pmap{$school};
  $school = $pmap{$school};
  die "class $class not found in pmap\n$line\n\n" if not exists $pmap{$class};
  $class = $pmap{$class};
  die "work $work not found in pmap\n" if not exists $pmap{$work};
  $work = $pmap{$work};
  die "off $off not found in pmap\n" if not exists $pmap{$off};
  $off = $pmap{$off};

  # select a profile
  # 0 = child; 1 = older student;  2 = teacher; 3 = worker; 4 = weekend worker; 5 = Unemployed; 6 = retired;
  if ($occ =~ /TTT/) {
    $occ =~ s/TTT.//;
    $profile = "2 Teacher";
  }
  elsif ($age < 16) { $profile = "0 Child" }
  elsif ($school ne "-1") { $profile = "1 Older_student" }
  elsif ($work ne "-1") {
    my $r = rand(1);
    if ($r < 0.8) {
      # weekday workers
      $profile = "3 Worker";
    }
    else {
      # 20% weekend workers
      $profile = "4 Weekend_worker";
    }
  }
  elsif ($age < 62) {
    $profile = "5 Unemployed";
  }
  else {
    $profile = "6 Retired";
  }
  print POP "$id $age $sex $married $occ $houseid $hood $school $class $work $off $profile\n";
  print "HELP: $id $age $sex $married $occ $houseid $hood $school $class $work $off $profile\n" if ($school > -1 and $school eq $class) or ($work > -1 and $work eq $off);
}
close POP;
close TMP;
unlink "pop.tmp";
unlink "pop.tmp2";

exit;
 

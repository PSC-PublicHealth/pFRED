#!/usr/bin/perl
$| = 1;

my ($n, $m) = @ARGV;
$n = 1 if not $n;
$m = $n if not $m;
my @data = ();
for my $i ($n..$m) {
  my $file = "OUT/out$i.txt";
  open FH, $file or die "Can't file file $file\n";
  while (my $line = <FH>) {
    chomp $line;
    push @data, $line;
  }
}
# print "@data";

# find number of days in the file
my $days = 0;
for my $line (@data) {
  my ($x1, $day, $y1, $dis, $x2, $S, $x3, $E, $x5, $I, $x6, $R, $x7, $N, $AR) =
    split " ", $line;
  # print "$day $S $E $I $R $N\n";
  $days = $day if $day > $days;
}
# print "days = $days\n";

# get_r();
make_report();
exit;

sub get_r {
  my @count = ();
  my @infect = ();
  for (my $d = 0; $d < $days; $d++) {
    $count[$d] = 0;
    $infect[$d] = 0;
  }
  for my $i ($n..$m) {
    my $file = "OUT/trace$i.txt";
    open FH, $file or die "Can't file file $file\n";
    print "processing OUT/trace$i.txt ", scalar localtime, "\n";
    # R id 7293192 a 28 s F U exp: 0 inf: 1 rem: 4 places 6 infected_at X -1 infector -1 infectees 2
    while (my $line = <FH>) {
      chomp $line;
      my @a = split " ", $line;
      my $day = $a[9];
      my $inf = $a[22];
      # print "day = $day  inf = $inf\n";
      $count[$day]++;
      $infect[$day] += $inf;
      # print "count =  $count[$day]  inf = $infect[$day]\n";
    }
    close FH;
  }
  open R, ">r.out";
  for (my $d = 0; $d < $days; $d++) {
    print R "$d ", ($count[$day]?$infect[$day]/$count[$day]:0.0), "\n";
  }  
  close R;
}

sub make_report {
  open FH, ">report.out";
  for (my $d = 0; $d < $days; $d++) {
    my @D = ();
    # print "day $d\n";
    for my $line (@data) {
      my ($x1, $day, $y1, $dis, $x2, $S, $x3, $E, $x5, $I, $x6, $R, $x7, $N, $x8, $AR) =
	split " ", $line;
      # print "$day $S $E $I $R $N $AR\n" if $day == $d;
      push @D, "$day " . ($E+$I) . " $S $E $I $R $N $AR" if $day == $d;
    }
    # print "D:\n";
    # print "$_\n" for @D;
    stats(@D);
    # print "\n\n\n";
  }
  close FH;
}



sub stats {
  my @a = @_;
  my @b = split " ", $a[0];
  my $day = $b[0];
  my $N = $b[6];
  # chomp $tot;
  # print "Day $day ";
  # print_2Darray(@a);
  print FH "Day $day ";
  for my $j (1..5) {
    my ($ave, $std) = get_stats_from_column($j, @a);
    # printf "%.1f %.2f  ", $ave, $std;
    printf FH "%.1f %.2f  ", $ave, $std;
  }
  my ($ave, $std) = get_stats_from_column(7, @a);
  # printf "%.1f %.2f  ", $ave, $std;
  printf FH "%.1f %.2f  ", $ave, $std;
  # print "$N\n";
  print FH "$N\n";
}

sub get_stats_from_column {
  my ($j, @a) = @_;
  my $n = scalar @a;
  my $sum = 0;
  my $sumsq = 0;
  for (my $i = 0; $i < $n; $i++) {
    my @b = split " ", $a[$i];
    my $x = $b[$j];
    $sum += $x;
    $sumsq += $x*$x;
  }
  my $std = 0;
  my $ave = 0;
  $ave = $sum / $n if $n;
  $std = sqrt(($n*$sumsq - $sum*$sum)/($n*($n-1))) if ($n>1) and ($n*$sumsq - $sum*$sum)/($n*($n-1)) > 0.0000000001;
 ($n*$sumsq - $sum*$sum) ;
  return ($ave, $std);
}

sub print_2Darray {
    my (@a) = @_;
    my $rows = scalar @a;
    my $cols = scalar @{$a[0]};
    for (my $i=0; $i < $rows; $i++) {
	for (my $j=0; $j < $cols; $j++) {
	    printf "%5d ", $a[$i][$j];
	}
	print "\n"; # newline after each row
    }
}
